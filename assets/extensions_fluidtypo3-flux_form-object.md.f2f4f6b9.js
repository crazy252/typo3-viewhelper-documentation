import{_ as t,c as e,o as l,a as n}from"./app.18d791a0.js";const g=JSON.parse('{"title":"<flux:form.object /> | flux | fluidtypo3","description":"","frontmatter":{"title":"<flux:form.object /> | flux | fluidtypo3"},"headers":[{"level":3,"title":"Attributes","slug":"attributes","link":"#attributes","children":[]}],"relativePath":"extensions/fluidtypo3-flux/form-object.md","lastUpdated":1675356565000}'),i={name:"extensions/fluidtypo3-flux/form-object.md"},a=n('<h1 id="flux-form-object" tabindex="-1">&lt;flux:form.object /&gt; <a class="header-anchor" href="#flux-form-object" aria-hidden="true">#</a></h1><p>Use this inside <code>flux:form.section</code> to name and divide the fields into individual objects that can be inserted into the section.</p><h3 id="attributes" tabindex="-1">Attributes <a class="header-anchor" href="#attributes" aria-hidden="true">#</a></h3><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:center;">Type</th><th style="text-align:center;">Default</th><th style="text-align:center;">Required</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">name</td><td style="text-align:center;">string</td><td style="text-align:center;"><code>null</code></td><td style="text-align:center;">Yes</td><td style="text-align:left;">Name of the section object, FlexForm XML-valid tag name string</td></tr><tr><td style="text-align:left;">label</td><td style="text-align:center;">string</td><td style="text-align:center;"><code>null</code></td><td style="text-align:center;">No</td><td style="text-align:left;">Label for section object, can be LLL: value. Optional - if not specified, Flux tries to detect an LLL label named &quot;flux.fluxFormId.objects.foobar&quot; based on object name, in scope of extension rendering the Flux form</td></tr><tr><td style="text-align:left;">variables</td><td style="text-align:center;">array</td><td style="text-align:center;"><code>[]</code></td><td style="text-align:center;">No</td><td style="text-align:left;">Freestyle variables which become assigned to the resulting Component - can then be read from that Component outside this Fluid template and in other templates using the Form object from this template</td></tr><tr><td style="text-align:left;">extensionName</td><td style="text-align:center;">string</td><td style="text-align:center;"><code>null</code></td><td style="text-align:center;">No</td><td style="text-align:left;">If provided, enables overriding the extension context for this and all child nodes. The extension name is otherwise automatically detected from rendering context</td></tr><tr><td style="text-align:left;">inherit</td><td style="text-align:center;">boolean</td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;">No</td><td style="text-align:left;">If TRUE, the value for this particular field is inherited - if inheritance is enabled by the ConfigurationProvider</td></tr><tr><td style="text-align:left;">inheritEmpty</td><td style="text-align:center;">boolean</td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;">No</td><td style="text-align:left;">If TRUE, allows empty values (specifically excluding the number zero!) to be inherited - if inheritance is enabled by the ConfigurationProvider</td></tr><tr><td style="text-align:left;">transform</td><td style="text-align:center;">string</td><td style="text-align:center;"><code>null</code></td><td style="text-align:center;">No</td><td style="text-align:left;">Set this to transform your value to this type - integer, array (for csv values), float, DateTime, Vendor\\MyExt\\Domain\\Model\\Object or ObjectStorage with type hint</td></tr><tr><td style="text-align:left;">contentContainer</td><td style="text-align:center;">boolean</td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;">No</td><td style="text-align:left;">If TRUE, each object that is created of this type results in a content column of the same name, with an automatic colPos value</td></tr></tbody></table>',4),d=[a];function o(r,s,c,f,x,h){return l(),e("div",null,d)}const u=t(i,[["render",o]]);export{g as __pageData,u as default};
